"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG") == "True"
if DEBUG:
    MEDIA_ROOT = os.path.join(BASE_DIR, "media/")
    MEDIA_URL = "/media/"

    # Database
    # https://docs.djangoproject.com/en/4.0/ref/settings/#databases

    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
    
else:
    DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"

    AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
    AWS_STORAGE_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME")

    AWS_REGION = "ap-northeast-2"
    AWS_S3_CUSTOM_DOMAIN = "%s.s3.%s.amazonaws.com" % (
        AWS_STORAGE_BUCKET_NAME,
        AWS_REGION,
    )

    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.getenv("DATABASE_NAME"),  # .env 파일에 value 작성
            "USER": "postgres",
            "PASSWORD": os.getenv("DATABASE_PASSWORD"),  # .env 파일에 value 작성
            "HOST": os.getenv("DATABASE_HOST"),  # .env 파일에 value 작성
            "PORT": "5432",
        }
    }
ALLOWED_HOSTS = [
    # "Elastic Beanstalk URL",
    # 주소 마지막에 / 를 작성하지 말아주세요.
    "classcard-env.eba-xnqaards.ap-northeast-2.elasticbeanstalk.com",  # 예시입니다. 본인 URL로 해주세요.
    "127.0.0.1",
    "localhost",
]


# Application definition

INSTALLED_APPS = [
    "accounts",
    "articles",
    "card",
    "magazine",
    "storages",
    "servicecenter",
    "django.contrib.sites",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_cleanup.apps.CleanupConfig",
    "django_extensions",
    "django_bootstrap5",
    "widget_tweaks",
    "django_summernote",
]

MESSAGE_STORAGE = "django.contrib.messages.storage.session.SessionStorage"

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "templates"),
            os.path.join(BASE_DIR, "templates", "allauth"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

MESSAGE_STORAGE = "django.contrib.messages.storage.cookie.CookieStorage"

WSGI_APPLICATION = "config.wsgi.application"

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "ko-kr"

TIME_ZONE = "Asia/Seoul"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = "/static/"

STATICFILES_DIRS = [BASE_DIR / "static"]

STATIC_ROOT = "staticfiles"

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Message Framework
# https://docs.djangoproject.com/en/4.1/ref/contrib/messages/

MESSAGE_STORAGE = "django.contrib.messages.storage.cookie.CookieStorage"

# Allauth
INSTALLED_APPS += [
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    # include the providers you want to enable:
    "allauth.socialaccount.providers.naver",
    "allauth.socialaccount.providers.google",
]

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    "django.contrib.auth.backends.ModelBackend",
    # `allauth` specific authentication methods, such as login by e-mail
    "allauth.account.auth_backends.AuthenticationBackend",
]

SITE_ID = 1
LOGIN_REDIRECT_URL = "/"
ACCOUNT_SIGNUP_REDIRECT_URL = "/"
LOGIN_URL = "/login"


# Provider specific settings
SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "SCOPE": [
            "profile",
            "email",
        ],
        "AUTH_PARAMS": {
            "access_type": "online",
        },
    }
}

AUTH_USER_MODEL = "accounts.User"

ACCOUNT_FORMS = {"signup": "accounts.forms.CustomUserCreationForm"}
# 로그아웃 확인 페이지 제거
ACCOUNT_LOGOUT_ON_GET = True
# SMTP 서버실행
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_EMAIL_REQUIRED = True
# ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
# 사용할 도메인 주소
EMAIL_HOST = "smtp.gmail.com"
# gmail의 port 번호
EMAIL_PORT = "587"
# email을 보내는 이메일
EMAIL_HOST_USER = os.getenv("EMAIL")
EMAIL_HOST_PASSWORD = os.getenv("PASS")
# email 보낼때 암호화 여부
EMAIL_USE_TLS = True
# mail보낼 email id 지정
DEFAULT_FORM_EMAIL = EMAIL_HOST_USER
# email 만료 기간
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1
# 보낸 email 맨앞에 붙여지는 이름
ACCOUNT_EMAIL_SUBJECT_PREFIX = "[이메일 인증] "
# 세션 쿠키 유효기간
SESSION_COOKIE_AGE = 3600
# 소셜 로그인 확인 페이지 제거
SOCIALACCOUNT_LOGIN_ON_GET = True
# ACCOUNT_PASSWORD_RESET_VERIFIED_ONLY = True

# 썸머노트 이미지 용량제한
SUMMERNOTE_CONFIG = {"attachment_filesize_limit": 5 * 1024 * 1024}
